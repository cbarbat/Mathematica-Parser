/* The following code was generated by JFlex 1.6.1 */

/*
 * Copyright (c) 2013 Patrick Scheibe & 2016 Calin Barbat
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package de.cbarbat.mathematica.lexer;

import java.util.LinkedList;
import de.cbarbat.mathematica.parser.MathematicaElementType;
import de.cbarbat.mathematica.parser.MathematicaElementTypes;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Mathematica.flex</tt>
 */
class _MathematicaLexer {
  /** math.skeleton is derived from skeleton.default and (c) 2016 by Calin Barbat */

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_STRING = 4;
  public static final int PUT_START = 6;
  public static final int PUT_RHS = 8;
  public static final int GET_START = 10;
  public static final int GET_RHS = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\1\54\1\55\1\2\22\0\1\57\1\44\1\30"+
    "\1\27\1\7\1\31\1\52\1\53\1\4\1\6\1\5\1\45\1\47"+
    "\1\26\1\24\1\40\1\15\1\23\1\17\1\20\1\21\1\21\1\21"+
    "\1\22\1\22\1\22\1\41\1\43\1\34\1\42\1\36\1\51\1\37"+
    "\32\56\1\12\1\11\1\13\1\25\1\50\1\14\32\16\1\32\1\35"+
    "\1\33\1\46\6\0\1\54\44\0\1\7\12\0\1\7\4\0\1\7"+
    "\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7"+
    "\7\0\1\7\1\0\1\7\201\0\5\7\1\0\2\7\2\0\4\7"+
    "\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\0\123\7\1\0\213\7\10\0\246\7\1\0\46\7\2\0\1\7"+
    "\7\0\47\7\110\0\33\7\5\0\3\7\55\0\53\7\25\0\12\10"+
    "\4\0\2\7\1\0\143\7\1\0\1\7\17\0\2\7\7\0\2\7"+
    "\12\10\3\7\2\0\1\7\20\0\1\7\1\0\36\7\35\0\131\7"+
    "\13\0\1\7\16\0\12\10\41\7\11\0\2\7\4\0\1\7\5\0"+
    "\26\7\4\0\1\7\11\0\1\7\3\0\1\7\27\0\31\7\107\0"+
    "\23\7\121\0\66\7\3\0\1\7\22\0\1\7\7\0\12\7\4\0"+
    "\12\10\1\0\20\7\4\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\1\7\3\0\4\7\3\0\1\7\20\0\1\7\15\0"+
    "\2\7\1\0\3\7\4\0\12\10\2\7\23\0\6\7\4\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\37\0\4\7\1\0\1\7\7\0\12\10\2\0\3\7\20\0\11\7"+
    "\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\3\0\1\7\22\0\1\7\17\0\2\7\4\0\12\10\25\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\3\0\1\7\36\0\2\7\1\0\3\7\4\0\12\10\1\0\1\7"+
    "\21\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\26\0\1\7\25\0\12\10\25\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\20\7\3\0\1\7\32\0\2\7\6\0\2\7\4\0\12\10"+
    "\25\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\3\0\1\7\40\0\1\7\1\0\2\7\4\0\12\10\1\0\2\7"+
    "\22\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7\20\0\1\7"+
    "\21\0\2\7\4\0\12\10\12\0\6\7\5\0\22\7\3\0\30\7"+
    "\1\0\11\7\1\0\1\7\2\0\7\7\37\0\12\10\21\0\60\7"+
    "\1\0\2\7\14\0\7\7\11\0\12\10\47\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7"+
    "\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7"+
    "\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\11\0\12\10"+
    "\2\0\4\7\40\0\1\7\37\0\12\10\26\0\10\7\1\0\44\7"+
    "\33\0\5\7\163\0\53\7\24\0\1\7\12\10\6\0\6\7\4\0"+
    "\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7\14\0"+
    "\1\7\1\0\12\10\6\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0"+
    "\4\7\2\0\103\7\45\0\20\7\20\0\125\7\14\0\u026c\7\2\0"+
    "\21\7\1\0\32\7\5\0\113\7\6\0\10\7\7\0\15\7\1\0"+
    "\4\7\16\0\22\7\16\0\22\7\16\0\15\7\1\0\3\7\17\0"+
    "\64\7\43\0\1\7\4\0\1\7\3\0\12\10\46\0\12\10\6\0"+
    "\130\7\10\0\51\7\1\0\1\7\5\0\106\7\12\0\37\7\47\0"+
    "\12\10\36\7\2\0\5\7\13\0\54\7\25\0\7\7\10\0\12\10"+
    "\46\0\27\7\11\0\65\7\53\0\12\10\6\0\12\10\15\0\1\7"+
    "\135\0\57\7\21\0\7\7\4\0\12\10\51\0\36\7\15\0\2\7"+
    "\12\10\54\7\32\0\44\7\34\0\12\10\3\0\3\7\12\10\44\7"+
    "\153\0\4\7\1\0\4\7\3\0\2\7\11\0\300\7\100\0\u0116\7"+
    "\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7"+
    "\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7"+
    "\4\0\15\7\5\0\3\7\1\0\7\7\53\0\1\54\1\54\107\0"+
    "\1\7\15\0\1\7\20\0\15\7\145\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\64\0\2\7\u0a7b\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\0\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\20\0\27\7\11\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\120\0\1\7\u01d5\0\2\7\52\0\5\7\5\0\2\7\4\0"+
    "\126\7\6\0\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0"+
    "\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0"+
    "\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0"+
    "\57\7\20\0\37\7\2\0\106\7\61\0\11\7\2\0\147\7\2\0"+
    "\4\7\1\0\36\7\2\0\2\7\105\0\13\7\1\0\3\7\1\0"+
    "\4\7\1\0\27\7\35\0\64\7\16\0\62\7\34\0\12\10\30\0"+
    "\6\7\3\0\1\7\4\0\12\10\34\7\12\0\27\7\31\0\35\7"+
    "\7\0\57\7\34\0\1\7\12\10\6\0\5\7\1\0\12\7\12\10"+
    "\5\7\1\0\51\7\27\0\3\7\1\0\10\7\4\0\12\10\6\0"+
    "\27\7\3\0\1\7\3\0\62\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\0\3\7\2\0\13\7\7\0"+
    "\3\7\14\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7\1\0"+
    "\7\7\1\0\53\7\1\0\4\7\4\0\2\7\132\0\43\7\15\0"+
    "\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0"+
    "\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\0\12\7\1\0"+
    "\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\14\7\164\0"+
    "\5\7\1\0\207\7\23\0\12\10\7\0\32\7\6\0\32\7\13\0"+
    "\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\43\0"+
    "\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0\17\7\2\0"+
    "\16\7\42\0\173\7\u0185\0\35\7\3\0\61\7\57\0\40\7\20\0"+
    "\21\7\1\0\10\7\6\0\46\7\12\0\36\7\2\0\44\7\4\0"+
    "\10\7\60\0\236\7\2\0\12\10\126\0\50\7\10\0\64\7\234\0"+
    "\u0137\7\11\0\26\7\12\0\10\7\230\0\6\7\2\0\1\7\1\0"+
    "\54\7\1\0\2\7\3\0\1\7\2\0\27\7\12\0\27\7\11\0"+
    "\37\7\141\0\26\7\12\0\32\7\106\0\70\7\6\0\2\7\100\0"+
    "\1\7\17\0\4\7\1\0\3\7\1\0\33\7\54\0\35\7\3\0"+
    "\35\7\43\0\10\7\1\0\34\7\33\0\66\7\12\0\26\7\12\0"+
    "\23\7\15\0\22\7\156\0\111\7\u03ba\0\65\7\56\0\12\10\23\0"+
    "\55\7\40\0\31\7\7\0\12\10\11\0\44\7\17\0\12\10\20\0"+
    "\43\7\3\0\1\7\14\0\60\7\16\0\4\7\13\0\12\10\1\7"+
    "\45\0\22\7\1\0\31\7\204\0\57\7\21\0\12\10\13\0\10\7"+
    "\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7"+
    "\3\0\1\7\37\0\5\7\u011e\0\60\7\24\0\2\7\1\0\1\7"+
    "\10\0\12\10\246\0\57\7\121\0\60\7\24\0\1\7\13\0\12\10"+
    "\46\0\53\7\25\0\12\10\u01d6\0\100\7\12\10\25\0\1\7\u01c0\0"+
    "\71\7\u0507\0\u0399\7\u0c67\0\u042f\7\u33d1\0\u0239\7\7\0\37\7\1\0"+
    "\12\10\146\0\36\7\22\0\60\7\20\0\4\7\14\0\12\10\11\0"+
    "\25\7\5\0\23\7\u0370\0\105\7\13\0\1\7\102\0\15\7\u4060\0"+
    "\2\7\u0bfe\0\153\7\5\0\15\7\3\0\11\7\7\0\12\7\u1766\0"+
    "\125\7\1\0\107\7\1\0\2\7\2\0\1\7\2\0\2\7\2\0"+
    "\4\7\1\0\14\7\1\0\1\7\1\0\7\7\1\0\101\7\1\0"+
    "\4\7\2\0\10\7\1\0\7\7\1\0\34\7\1\0\4\7\1\0"+
    "\5\7\1\0\1\7\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0"+
    "\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\10\7\2\0"+
    "\62\10\u1000\0\305\7\u053b\0\4\7\1\0\33\7\1\0\2\7\1\0"+
    "\1\7\2\0\1\7\1\0\12\7\1\0\4\7\1\0\1\7\1\0"+
    "\1\7\6\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\3\7\1\0\2\7\1\0\1\7\2\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7\2\0"+
    "\4\7\1\0\7\7\1\0\4\7\1\0\4\7\1\0\1\7\1\0"+
    "\12\7\1\0\21\7\5\0\3\7\1\0\5\7\1\0\21\7\u1144\0"+
    "\ua6d7\7\51\0\u1035\7\13\0\336\7\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\5\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\5\44\2\45\1\46"+
    "\1\47\1\1\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\2\0\2\3\1\0\1\60\1\0\2\13"+
    "\1\0\1\61\1\0\1\62\1\63\1\64\1\65\1\66"+
    "\1\0\1\17\1\67\1\0\1\70\1\21\1\0\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\0\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\2\0\2\45\2\0\1\7\2\0\1\13\2\0\1\131"+
    "\1\132\2\0\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\1\0\1\144\1\0\1\145\1\13"+
    "\1\0\2\13\1\0\1\66\1\0\1\13\1\0\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0120\0\u0210\0\u0240\0\u0120\0\u0120"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\u0420\0\u0120\0\u0450\0\u0120\0\u0120\0\u0480\0\u04b0"+
    "\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\u0120\0\u0690\0\u0120\0\u06c0\0\u0120\0\u06f0\0\u01b0"+
    "\0\u0720\0\u0120\0\u0750\0\u0780\0\u07b0\0\u0120\0\u0120\0\u07e0"+
    "\0\u0810\0\u0840\0\u0120\0\u0120\0\u0870\0\u0120\0\u0120\0\u0120"+
    "\0\u08a0\0\u08d0\0\u0120\0\u0900\0\u0930\0\u0120\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0c00\0\u0120"+
    "\0\u0120\0\u0c30\0\u0120\0\u0120\0\u0120\0\u0c60\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0c90\0\u0cc0\0\u0cf0\0\u0120"+
    "\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0d20\0\u0120"+
    "\0\u0120\0\u0d50\0\u0d80\0\u0120\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0120\0\u0120\0\u0f60"+
    "\0\u0f90\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120\0\u0120"+
    "\0\u0120\0\u0120\0\u0fc0\0\u0120\0\u0ff0\0\u0120\0\u1020\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u0120\0\u10e0\0\u1110\0\u1140\0\u0120";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\15\1\23\1\24"+
    "\2\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\0\1\11\1\15\1\11\4\57\1\60"+
    "\1\61\1\62\32\57\1\63\16\57\11\64\1\65\16\64"+
    "\1\66\27\64\1\67\2\70\1\71\50\67\1\0\1\71"+
    "\1\67\1\71\1\72\2\70\2\7\1\72\1\7\3\72"+
    "\2\7\11\72\1\7\1\72\1\7\1\73\7\7\2\72"+
    "\2\7\1\72\1\7\1\72\1\7\3\72\1\7\1\72"+
    "\1\0\1\72\1\7\1\74\2\70\1\75\50\74\1\0"+
    "\1\75\1\74\1\75\61\0\2\10\60\0\1\11\51\0"+
    "\1\11\1\0\1\11\5\0\1\76\57\0\1\77\34\0"+
    "\1\100\24\0\2\15\1\101\2\0\1\102\7\15\32\0"+
    "\1\15\2\0\1\103\1\104\7\0\1\105\54\0\1\15"+
    "\1\0\1\101\2\0\1\106\1\0\1\15\37\0\1\15"+
    "\6\0\1\107\6\0\1\110\1\22\1\0\5\22\1\111"+
    "\40\0\1\107\6\0\1\110\1\25\1\0\5\25\1\111"+
    "\1\112\37\0\1\107\6\0\1\110\1\25\1\0\3\25"+
    "\1\22\1\25\1\111\1\112\37\0\1\107\6\0\1\110"+
    "\1\22\1\0\5\22\1\111\1\112\37\0\1\107\6\0"+
    "\1\110\1\25\1\0\5\25\1\111\50\0\1\111\1\0"+
    "\5\111\1\113\74\0\1\114\1\115\43\0\1\116\7\0"+
    "\1\117\3\0\1\120\24\0\1\121\1\0\1\122\3\0"+
    "\1\123\1\121\5\123\3\0\1\124\1\125\25\0\1\121"+
    "\16\0\1\126\1\0\5\126\5\0\1\127\54\0\1\130"+
    "\5\0\1\131\1\132\1\133\3\0\1\134\52\0\1\135"+
    "\1\136\57\0\1\137\3\0\1\140\22\0\1\141\31\0"+
    "\1\142\25\0\1\143\16\0\1\144\12\0\1\145\1\146"+
    "\1\147\1\150\1\151\52\0\1\152\2\0\1\153\1\154"+
    "\41\0\1\155\15\0\1\156\1\0\1\157\56\0\1\160"+
    "\56\0\1\161\1\0\1\162\55\0\1\163\2\0\1\164"+
    "\60\0\1\165\35\0\1\166\23\0\1\167\61\0\1\170"+
    "\5\0\4\57\3\0\32\57\1\0\16\57\6\0\1\171"+
    "\112\0\1\172\14\0\1\173\1\0\11\64\1\0\16\64"+
    "\1\0\27\64\1\0\1\174\1\175\6\0\1\174\1\176"+
    "\15\0\1\174\30\0\2\70\60\0\1\71\51\0\1\71"+
    "\1\0\1\71\1\72\4\0\1\72\1\0\3\72\2\0"+
    "\11\72\1\0\1\72\11\0\2\72\2\0\1\72\1\0"+
    "\1\72\1\0\3\72\1\0\1\72\1\0\1\72\4\0"+
    "\1\75\51\0\1\75\1\0\1\75\12\0\1\105\54\0"+
    "\1\15\1\0\1\101\4\0\1\15\37\0\1\15\2\0"+
    "\1\103\65\0\1\177\3\0\1\200\2\0\1\177\37\0"+
    "\1\177\26\0\1\201\37\0\1\107\6\0\1\202\1\203"+
    "\1\0\5\203\1\204\40\0\1\107\6\0\1\110\1\111"+
    "\1\0\5\111\61\0\1\205\56\0\1\206\75\0\1\207"+
    "\24\0\2\121\4\0\7\121\32\0\1\121\13\0\1\210"+
    "\62\0\1\123\1\0\5\123\51\0\1\124\1\0\5\124"+
    "\43\0\1\211\6\0\1\211\37\0\1\211\16\0\1\126"+
    "\1\0\5\126\65\0\1\127\64\0\1\212\57\0\1\213"+
    "\60\0\1\214\44\0\1\215\12\0\1\216\35\0\1\217"+
    "\1\0\5\217\76\0\1\220\57\0\1\221\65\0\1\222"+
    "\65\0\1\223\17\0\1\173\22\0\1\224\14\0\2\173"+
    "\1\0\1\174\65\0\1\225\3\0\1\226\2\0\1\225"+
    "\37\0\1\225\10\0\2\177\2\0\1\200\1\0\7\177"+
    "\32\0\1\177\10\0\1\15\1\0\1\101\2\0\1\102"+
    "\1\0\1\15\37\0\1\15\16\0\1\227\1\0\5\227"+
    "\2\0\1\230\46\0\1\203\1\0\5\203\1\204\40\0"+
    "\1\107\7\0\1\203\1\0\5\203\1\231\50\0\1\231"+
    "\1\0\5\231\51\0\7\232\32\0\1\232\10\0\1\233"+
    "\6\0\1\233\37\0\1\233\10\0\2\211\4\0\7\211"+
    "\4\0\1\234\25\0\1\211\17\0\1\223\22\0\1\235"+
    "\14\0\1\223\10\0\2\225\2\0\1\226\1\0\7\225"+
    "\32\0\1\225\16\0\1\227\1\0\5\227\41\0\1\107"+
    "\7\0\1\231\1\0\5\231\50\0\1\110\7\232\1\236"+
    "\31\0\1\232\10\0\2\233\1\237\3\0\7\233\32\0"+
    "\1\233\42\0\1\240\32\0\1\110\7\236\32\0\1\236"+
    "\14\0\1\234\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4464];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\2\1\2\11\12\1\1\11"+
    "\1\1\2\11\13\1\1\11\1\1\1\11\1\1\1\11"+
    "\3\1\1\11\3\1\2\11\3\1\2\11\1\1\3\11"+
    "\2\0\1\11\1\1\1\0\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\4\11\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\6\11\1\1\2\11\1\1\3\11\1\1\6\11"+
    "\2\1\1\0\7\11\1\1\2\11\2\0\1\11\1\1"+
    "\2\0\1\1\2\0\1\1\2\0\2\11\2\0\11\11"+
    "\1\0\1\11\1\0\1\11\1\1\1\0\2\1\1\0"+
    "\1\11\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char[] zzBuffer;

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
  private final LinkedList<Integer> states = new LinkedList<Integer>();

  private void yypushstate(int state) {
  	states.addFirst(yystate());
  	yybegin(state);
  }

  private void yypopstate() {
  	final int state = states.removeFirst();
    yybegin(state);
  }



  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(char[] buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _MathematicaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2444) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
   public final String yytext() {
     StringBuilder sb = new StringBuilder();
     for (int i = zzStartRead; i < zzMarkedPos; i++)
       sb.append(zzBuffer[i]);
     return sb.toString();
   }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.toString().charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public MathematicaElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBufferArray;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return MathematicaElementTypes.BAD_CHARACTER;
            }
          case 103: break;
          case 2: 
            { return MathematicaElementTypes.LINE_BREAK;
            }
          case 104: break;
          case 3: 
            { return MathematicaElementTypes.WHITE_SPACE;
            }
          case 105: break;
          case 4: 
            { return MathematicaElementTypes.LEFT_PAR;
            }
          case 106: break;
          case 5: 
            { return MathematicaElementTypes.TIMES;
            }
          case 107: break;
          case 6: 
            { return MathematicaElementTypes.RIGHT_PAR;
            }
          case 108: break;
          case 7: 
            { return MathematicaElementTypes.IDENTIFIER;
            }
          case 109: break;
          case 8: 
            { return MathematicaElementTypes.LEFT_BRACKET;
            }
          case 110: break;
          case 9: 
            { return MathematicaElementTypes.RIGHT_BRACKET;
            }
          case 111: break;
          case 10: 
            { return MathematicaElementTypes.BACK_TICK;
            }
          case 112: break;
          case 11: 
            { return MathematicaElementTypes.NUMBER;
            }
          case 113: break;
          case 12: 
            { return MathematicaElementTypes.POINT;
            }
          case 114: break;
          case 13: 
            { return MathematicaElementTypes.POWER;
            }
          case 115: break;
          case 14: 
            { return MathematicaElementTypes.MINUS;
            }
          case 116: break;
          case 15: 
            { return MathematicaElementTypes.SLOT;
            }
          case 117: break;
          case 16: 
            { yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
            }
          case 118: break;
          case 17: 
            { return MathematicaElementTypes.OUT;
            }
          case 119: break;
          case 18: 
            { return MathematicaElementTypes.LEFT_BRACE;
            }
          case 120: break;
          case 19: 
            { return MathematicaElementTypes.RIGHT_BRACE;
            }
          case 121: break;
          case 20: 
            { return MathematicaElementTypes.LESS;
            }
          case 122: break;
          case 21: 
            { return MathematicaElementTypes.ALTERNATIVE;
            }
          case 123: break;
          case 22: 
            { return MathematicaElementTypes.GREATER;
            }
          case 124: break;
          case 23: 
            { return MathematicaElementTypes.PREFIX_CALL;
            }
          case 125: break;
          case 24: 
            { return MathematicaElementTypes.DIVIDE;
            }
          case 126: break;
          case 25: 
            { return MathematicaElementTypes.COLON;
            }
          case 127: break;
          case 26: 
            { return MathematicaElementTypes.SET;
            }
          case 128: break;
          case 27: 
            { return MathematicaElementTypes.SEMICOLON;
            }
          case 129: break;
          case 28: 
            { return MathematicaElementTypes.EXCLAMATION_MARK;
            }
          case 130: break;
          case 29: 
            { return MathematicaElementTypes.PLUS;
            }
          case 131: break;
          case 30: 
            { return MathematicaElementTypes.INFIX_CALL;
            }
          case 132: break;
          case 31: 
            { return MathematicaElementTypes.COMMA;
            }
          case 133: break;
          case 32: 
            { return MathematicaElementTypes.BLANK;
            }
          case 134: break;
          case 33: 
            { return MathematicaElementTypes.QUESTION_MARK;
            }
          case 135: break;
          case 34: 
            { return MathematicaElementTypes.FUNCTION;
            }
          case 136: break;
          case 35: 
            { return MathematicaElementTypes.DERIVATIVE;
            }
          case 137: break;
          case 36: 
            { return MathematicaElementTypes.COMMENT_CONTENT;
            }
          case 138: break;
          case 37: 
            { return MathematicaElementTypes.STRING_LITERAL;
            }
          case 139: break;
          case 38: 
            { yypopstate(); return MathematicaElementTypes.STRING_LITERAL_END;
            }
          case 140: break;
          case 39: 
            { yypushback(1); yybegin(PUT_RHS);
            }
          case 141: break;
          case 40: 
            { yybegin(PUT_RHS); return MathematicaElementTypes.WHITE_SPACE;
            }
          case 142: break;
          case 41: 
            { yybegin(YYINITIAL); return MathematicaElementTypes.STRINGIFIED_IDENTIFIER;
            }
          case 143: break;
          case 42: 
            { yybegin(YYINITIAL); yypushstate(IN_STRING); return MathematicaElementTypes.STRING_LITERAL_BEGIN;
            }
          case 144: break;
          case 43: 
            { yypushback(1); yybegin(GET_RHS);
            }
          case 145: break;
          case 44: 
            { yybegin(GET_RHS); return MathematicaElementTypes.WHITE_SPACE;
            }
          case 146: break;
          case 45: 
            { yypushstate(IN_COMMENT); return MathematicaElementTypes.COMMENT_START;
            }
          case 147: break;
          case 46: 
            { return MathematicaElementTypes.NON_COMMUTATIVE_MULTIPLY;
            }
          case 148: break;
          case 47: 
            { return MathematicaElementTypes.TIMES_BY;
            }
          case 149: break;
          case 48: 
            { return MathematicaElementTypes.ACCURACY;
            }
          case 150: break;
          case 49: 
            { return MathematicaElementTypes.REPEATED;
            }
          case 151: break;
          case 50: 
            { return MathematicaElementTypes.UP_SET;
            }
          case 152: break;
          case 51: 
            { return MathematicaElementTypes.DECREMENT;
            }
          case 153: break;
          case 52: 
            { return MathematicaElementTypes.RULE;
            }
          case 154: break;
          case 53: 
            { return MathematicaElementTypes.SUBTRACT_FROM;
            }
          case 155: break;
          case 54: 
            { return MathematicaElementTypes.ASSOCIATION_SLOT;
            }
          case 156: break;
          case 55: 
            { return MathematicaElementTypes.SLOT_SEQUENCE;
            }
          case 157: break;
          case 56: 
            { return MathematicaElementTypes.OUT1;
            }
          case 158: break;
          case 57: 
            { yybegin(GET_START); return MathematicaElementTypes.GET;
            }
          case 159: break;
          case 58: 
            { return MathematicaElementTypes.LEFT_ASSOCIATION;
            }
          case 160: break;
          case 59: 
            { return MathematicaElementTypes.STRING_JOIN;
            }
          case 161: break;
          case 60: 
            { return MathematicaElementTypes.LESS_EQUAL;
            }
          case 162: break;
          case 61: 
            { return MathematicaElementTypes.OR;
            }
          case 163: break;
          case 62: 
            { return MathematicaElementTypes.RIGHT_ASSOCIATION;
            }
          case 164: break;
          case 63: 
            { yybegin(PUT_START); return MathematicaElementTypes.PUT;
            }
          case 165: break;
          case 64: 
            { return MathematicaElementTypes.GREATER_EQUAL;
            }
          case 166: break;
          case 65: 
            { return MathematicaElementTypes.COMPOSITION;
            }
          case 167: break;
          case 66: 
            { return MathematicaElementTypes.APPLY;
            }
          case 168: break;
          case 67: 
            { return MathematicaElementTypes.RIGHT_COMPOSITION;
            }
          case 169: break;
          case 68: 
            { return MathematicaElementTypes.REPLACE_ALL;
            }
          case 170: break;
          case 69: 
            { return MathematicaElementTypes.MAP;
            }
          case 171: break;
          case 70: 
            { return MathematicaElementTypes.POSTFIX;
            }
          case 172: break;
          case 71: 
            { return MathematicaElementTypes.TAG_SET;
            }
          case 173: break;
          case 72: 
            { return MathematicaElementTypes.DIVIDE_BY;
            }
          case 174: break;
          case 73: 
            { return MathematicaElementTypes.CONDITION;
            }
          case 175: break;
          case 74: 
            { return MathematicaElementTypes.RULE_DELAYED;
            }
          case 176: break;
          case 75: 
            { return MathematicaElementTypes.DOUBLE_COLON;
            }
          case 177: break;
          case 76: 
            { return MathematicaElementTypes.SET_DELAYED;
            }
          case 178: break;
          case 77: 
            { return MathematicaElementTypes.UNSET;
            }
          case 179: break;
          case 78: 
            { return MathematicaElementTypes.EQUAL;
            }
          case 180: break;
          case 79: 
            { return MathematicaElementTypes.SPAN;
            }
          case 181: break;
          case 80: 
            { return MathematicaElementTypes.UNEQUAL;
            }
          case 182: break;
          case 81: 
            { return MathematicaElementTypes.DOUBLE_EXCLAMATION_MARK;
            }
          case 183: break;
          case 82: 
            { return MathematicaElementTypes.ADD_TO;
            }
          case 184: break;
          case 83: 
            { return MathematicaElementTypes.INCREMENT;
            }
          case 185: break;
          case 84: 
            { return MathematicaElementTypes.STRING_EXPRESSION;
            }
          case 186: break;
          case 85: 
            { return MathematicaElementTypes.DEFAULT;
            }
          case 187: break;
          case 86: 
            { return MathematicaElementTypes.BLANK_SEQUENCE;
            }
          case 188: break;
          case 87: 
            { return MathematicaElementTypes.AND;
            }
          case 189: break;
          case 88: 
            { yypopstate(); return MathematicaElementTypes.COMMENT_END;
            }
          case 190: break;
          case 89: 
            { return MathematicaElementTypes.REPEATED_NULL;
            }
          case 191: break;
          case 90: 
            { return MathematicaElementTypes.UP_SET_DELAYED;
            }
          case 192: break;
          case 91: 
            { return MathematicaElementTypes.UNDIRECTED_EDGE;
            }
          case 193: break;
          case 92: 
            { yybegin(PUT_START); return MathematicaElementTypes.PUT_APPEND;
            }
          case 194: break;
          case 93: 
            { return MathematicaElementTypes.APPLY1;
            }
          case 195: break;
          case 94: 
            { return MathematicaElementTypes.REPLACE_REPEATED;
            }
          case 196: break;
          case 95: 
            { return MathematicaElementTypes.MAP_ALL;
            }
          case 197: break;
          case 96: 
            { yypushback(2); return MathematicaElementTypes.SET;
            }
          case 198: break;
          case 97: 
            { return MathematicaElementTypes.SAME_Q;
            }
          case 199: break;
          case 98: 
            { return MathematicaElementTypes.UNSAME_Q;
            }
          case 200: break;
          case 99: 
            { return MathematicaElementTypes.BLANK_NULL_SEQUENCE;
            }
          case 201: break;
          case 100: 
            { return MathematicaElementTypes.COMMENT_ANNOTATION;
            }
          case 202: break;
          case 101: 
            { return MathematicaElementTypes.STRING_NAMED_CHARACTER;
            }
          case 203: break;
          case 102: 
            { return MathematicaElementTypes.COMMENT_SECTION;
            }
          case 204: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
